import { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { formatDistance } from 'date-fns';
import { ja } from 'date-fns/locale';
import { getNotifications, markAllAsRead, Notification } from '../services/notificationService';
import Button from '../components/ui/Button';

const NotificationsPage = () => {
  const navigate = useNavigate();
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loadingMore, setLoadingMore] = useState(false);
  
  // ÈÄöÁü•„ÇíÂèñÂæó
  useEffect(() => {
    const fetchNotifications = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const data = await getNotifications({ page: 1, limit: 20 });
        setNotifications(data);
        setHasMore(data.length === 20);
      } catch (error) {
        console.error('ÈÄöÁü•ÂèñÂæó„Ç®„É©„Éº:', error);
        setError('ÈÄöÁü•„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      } finally {
        setLoading(false);
      }
    };
    
    fetchNotifications();
  }, []);
  
  // ËøΩÂä†„ÅÆÈÄöÁü•„ÇíË™≠„ÅøËæº„ÇÄ
  const loadMoreNotifications = async () => {
    if (loadingMore || !hasMore) return;
    
    setLoadingMore(true);
    
    try {
      const nextPage = page + 1;
      const data = await getNotifications({ page: nextPage, limit: 20 });
      
      if (data.length > 0) {
        setNotifications(prev => [...prev, ...data]);
        setPage(nextPage);
      }
      
      setHasMore(data.length === 20);
    } catch (error) {
      console.error('ËøΩÂä†ÈÄöÁü•ÂèñÂæó„Ç®„É©„Éº:', error);
    } finally {
      setLoadingMore(false);
    }
  };
  
  // ÂÖ®„Å¶„ÅÆÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åô„Çã
  const handleMarkAllAsRead = async () => {
    try {
      await markAllAsRead();
      // Êó¢Ë™≠Áä∂ÊÖã„ÇíÊõ¥Êñ∞
      setNotifications(prev => 
        prev.map(notification => ({ ...notification, is_read: true }))
      );
    } catch (error) {
      console.error('ÈÄöÁü•Êó¢Ë™≠„Ç®„É©„Éº:', error);
    }
  };
  
  // ÈÄöÁü•„Å´Âü∫„Å•„Åè„Ç¢„ÇØ„Ç∑„Éß„É≥
  const handleNotificationClick = (notification: Notification) => {
    if (notification.type === 'like' || notification.type === 'reply') {
      // ÊäïÁ®øË©≥Á¥∞„Éö„Éº„Ç∏„Å´ÁßªÂãï
      if (notification.target_id) {
        navigate(`/post/${notification.target_id}`);
      }
    } else if (notification.type === 'follow') {
      // „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´„Éö„Éº„Ç∏„Å´ÁßªÂãï
      navigate(`/profile/${notification.actor_username}`);
    }
  };
  
  // Êó•‰ªò„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  const formatDate = (dateString: string) => {
    return formatDistance(new Date(dateString), new Date(), {
      addSuffix: true,
      locale: ja
    });
  };
  
  // ÈÄöÁü•„Çø„Ç§„Éó„Å´Âü∫„Å•„Åè„Ç¢„Ç§„Ç≥„É≥„ÇíÂèñÂæó
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'like':
        return '‚ù§Ô∏è';
      case 'follow':
        return 'üë§';
      case 'reply':
        return 'üí¨';
      default:
        return 'üîî';
    }
  };
  
  // ÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
  const getNotificationMessage = (notification: Notification) => {
    switch (notification.type) {
      case 'like':
        return `${notification.actor_display_name}„Åï„Çì„Åå„ÅÇ„Å™„Åü„ÅÆÊäïÁ®ø„Å´„ÅÑ„ÅÑ„Å≠„Åó„Åæ„Åó„Åü`;
      case 'follow':
        return `${notification.actor_display_name}„Åï„Çì„Åå„ÅÇ„Å™„Åü„Çí„Éï„Ç©„É≠„Éº„Åó„Åæ„Åó„Åü`;
      case 'reply':
        return `${notification.actor_display_name}„Åï„Çì„Åå„ÅÇ„Å™„Åü„ÅÆÊäïÁ®ø„Å´„É™„Éó„É©„Ç§„Åó„Åæ„Åó„Åü`;
      default:
        return 'Êñ∞„Åó„ÅÑÈÄöÁü•„Åå„ÅÇ„Çä„Åæ„Åô';
    }
  };
  
  // Êàª„Çã„Éú„Çø„É≥„ÅÆ„Éè„É≥„Éâ„É©„Éº
  const handleGoBack = () => {
    navigate(-1); // „Éñ„É©„Ç¶„Ç∂„ÅÆÂ±•Ê≠¥„Åß1„Å§Ââç„Å´Êàª„Çã
  };
  
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header className="bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-10">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-14">
            <button
              onClick={handleGoBack}
              className="text-gray-500 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white"
            >
              ‚Üê Êàª„Çã
            </button>
            <h1 className="text-lg font-bold text-gray-900 dark:text-white">ÈÄöÁü•</h1>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleMarkAllAsRead}
              disabled={notifications.every(n => n.is_read) || notifications.length === 0}
            >
              „Åô„Åπ„Å¶Êó¢Ë™≠
            </Button>
          </div>
        </div>
      </header>
      
      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <main className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
          {loading && notifications.length === 0 ? (
            <div className="p-8 text-center text-gray-500 dark:text-gray-400">
              Ë™≠„ÅøËæº„Åø‰∏≠...
            </div>
          ) : error ? (
            <div className="p-8 text-center text-red-500">
              {error}
            </div>
          ) : notifications.length === 0 ? (
            <div className="p-8 text-center text-gray-500 dark:text-gray-400">
              ÈÄöÁü•„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì
            </div>
          ) : (
            <ul>
              {notifications.map(notification => (
                <li
                  key={notification.id}
                  className={`border-b border-gray-200 dark:border-gray-700 last:border-b-0 ${
                    !notification.is_read ? 'bg-blue-50 dark:bg-blue-900/20' : ''
                  }`}
                >
                  <button
                    onClick={() => handleNotificationClick(notification)}
                    className="w-full text-left p-4 flex items-start hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors"
                  >
                    {/* „Ç¢„ÇØ„Çø„Éº„ÅÆ„Ç¢„Éê„Çø„Éº */}
                    <div className="mr-4 mt-1">
                      <img
                        src={notification.actor_avatar_url || '/default-avatar.png'}
                        alt={`${notification.actor_display_name}„ÅÆ„Ç¢„Éê„Çø„Éº`}
                        className="w-10 h-10 rounded-full object-cover"
                      />
                    </div>
                    
                    {/* ÈÄöÁü•ÂÜÖÂÆπ */}
                    <div className="flex-1">
                      <div className="flex items-start justify-between">
                        <div>
                          <p className="text-gray-900 dark:text-white">
                            <span className="mr-2">{getNotificationIcon(notification.type)}</span>
                            {getNotificationMessage(notification)}
                          </p>
                          
                          {notification.content && (
                            <p className="mt-1 text-gray-600 dark:text-gray-300 text-sm">
                              {notification.content.length > 100
                                ? `${notification.content.substring(0, 100)}...`
                                : notification.content}
                            </p>
                          )}
                        </div>
                        
                        {/* Êó•‰ªò */}
                        <span className="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap ml-2">
                          {formatDate(notification.created_at)}
                        </span>
                      </div>
                    </div>
                  </button>
                </li>
              ))}
            </ul>
          )}
          
          {/* „ÇÇ„Å£„Å®Ë™≠„ÅøËæº„ÇÄ„Éú„Çø„É≥ */}
          {hasMore && notifications.length > 0 && (
            <div className="p-4 text-center">
              <Button
                variant="outline"
                onClick={loadMoreNotifications}
                isLoading={loadingMore}
                disabled={loadingMore}
              >
                „ÇÇ„Å£„Å®Ë™≠„ÅøËæº„ÇÄ
              </Button>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default NotificationsPage; 